<?phpnamespace api\V1\cities;include "../../../AutoLoad.php";use app\Repositories\CityRepository;use app\Repositories\UserRepository;use app\Responses\Response;use app\Services\AuthorizationService;use app\Validations\Validation;class cities{    public $request_body;    public function __construct()    {        $this->request_body = json_decode(file_get_contents('php://input'),true);    }    public function index($method)    {        switch ($method)        {            case 'GET' :                $province_id = $_GET['province_id'] ?? null;                $token = AuthorizationService::getBearerToken();                if (!AuthorizationService::is_validToken($token))                {                    Response::respondAndDie(['ERROR : token invalid'] , Response::HTTP_UNAUTHORIZED);                }                if (!Validation::validate($province_id, [Validation::numeric]))                {                    Response::respondAndDie(['ERROR : invalid parameter'] , Response::HTTP_UNAUTHORIZED);                }                $user = AuthorizationService::is_validToken($token);                if (!AuthorizationService::hasAccessTo($user , $province_id))                {                    Response::respondAndDie(['ERROR : access denied'] , Response::HTTP_FORBIDDEN);                }                if (is_null($province_id))                {                    $response = (new CityRepository())->getAll();                    Response::respondAndDie($response , Response::HTTP_OK);                }else                {                    $response = (new CityRepository())->getSingle($_GET['province_id']);                    Response::respondAndDie($response , Response::HTTP_OK);                }                   break;            case 'POST' :                $name = $this->request_body['name'] ?? null ;                $province_id = $this->request_body['province_id'] ?? null ;                if (is_null($name) || is_null($province_id))                {                    $response = ['Error' => 'validation failed'];                    Response::respondAndDie( $response , Response::HTTP_NOT_ACCEPTABLE);                }                if (Validation::validate($name, [Validation::string]) && Validation::validate($province_id, [Validation::numeric]) )                {                    $response = (new CityRepository())->add(['name' => $name , 'province_id'=>$province_id]);                    Response::respondAndDie($response , Response::HTTP_CREATED);                }else                {                    $response = ['Error' => 'validation failed'];                    Response::respondAndDie($response , Response::HTTP_NOT_ACCEPTABLE);                }                break;            case 'PUT':                $name = $this->request_body['name'] ?? null;                $city_id = $this->request_body['city_id'] ?? null;                if(is_null($name) || is_null($city_id))                {                    $response = ['ERROR' => 'post value is null'];                    Response::respondAndDie($response , Response::HTTP_NOT_ACCEPTABLE);                }               if((Validation::validate($name , [Validation::string]) && Validation::validate($city_id , [Validation::numeric])))               {                   $response = (new CityRepository())->update($name , $city_id);                   Response::respondAndDie($response , Response::HTTP_OK);               }else               {                   $response = ['ERROR' => 'Validation failed'];                   Response::respondAndDie($response , Response::HTTP_NOT_ACCEPTABLE);               }                break;        }    }}(new cities())->index($_SERVER['REQUEST_METHOD']);