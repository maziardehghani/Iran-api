<?phpnamespace api\V1\users;include "../../../AutoLoad.php";use app\Repositories\CityRepository;use app\Repositories\UserRepository;use app\Responses\Response;use app\Validations\Validation;use app\Services\JWTService;use app\Services\AuthorizationService;class users{    public $request_body;    public function __construct()    {        $this->request_body = json_decode(file_get_contents('php://input'),true);    }    public function index($method)    {        switch ($method)        {            case 'GET' :                $token = AuthorizationService::getBearerToken();                if (!AuthorizationService::is_validToken($token))                    Response::respondAndDie(['ERROR : token invalid'] , Response::HTTP_UNAUTHORIZED);                $payload = AuthorizationService::is_validToken($token);                echo Response::respond($payload , Response::HTTP_OK);                break;            case 'POST' :                $user_id = $this->request_body['user_id'] ?? null;                if (is_null($this->request_body))                {                    $response = ['ERROR' => 'post user is null'];                    Response::respondAndDie($response , Response::HTTP_NOT_ACCEPTABLE);                }                if (Validation::validate($user_id , [Validation::numeric , Validation::int]))                {                    $jwt = JWTService::createToken($user_id);                    echo Response::respond($jwt , Response::HTTP_NOT_ACCEPTABLE);                }else                {                    $response = ['ERROR' => 'Validation failed'];                    Response::respondAndDie($response , Response::HTTP_NOT_ACCEPTABLE);                }                break;            case 'PUT':        }    }}(new users())->index($_SERVER['REQUEST_METHOD']);